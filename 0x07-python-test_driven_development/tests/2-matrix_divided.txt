this module will test the division of each element of a matrix in different matrix approaches


::


	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...	[5, 10, 15],
	...	[20, 25, 30]
	...	]
	>>> print(matrix_divided(matrix, 5))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]


::


	>>> matrix = [
    	...	[1.5, 2.7, 3.4],
    	...	[4.2, 5.1, 6.9],
    	...	[7.8, 8.6, 9.3]
	...	]
	>>> print(matrix_divided(matrix, 2))
	[[0.75, 1.35, 1.7], [2.1, 2.55, 3.45], [3.9, 4.3, 4.65]]


::


	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, "divisior"))
	Traceback (most recent call last):
	TypeError: div must be a number


::


	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero


::


	>>> matrix = [
	...     [1, 2, 3],
	...     [4, "not a number", 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


::


	>>> matrix = [1, 2, 3]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::


	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, float('inf'))
	[[0, 0, 0], [0, 0, 0]]
